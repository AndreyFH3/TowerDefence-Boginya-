//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/Controller/CameraControlScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraControlScheme: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraControlScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraControlScheme"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""148c54e9-83f7-4691-b117-88f94f06e38a"",
            ""actions"": [
                {
                    ""name"": ""DeltaMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""60345cf2-dad2-4226-9707-94ad697c959f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ZoomMouse"",
                    ""type"": ""Value"",
                    ""id"": ""4a25daa3-5dea-4dd7-b7a7-30ad35f9a9b6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartDeltaDrag"",
                    ""type"": ""Button"",
                    ""id"": ""c67543ef-76e4-406b-80fb-c9ff059e1a60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""597dc879-b9d9-4f68-97c3-15fe1a86a3fe"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Camera"",
                    ""action"": ""DeltaMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a16be0e8-7a3a-49ca-a577-8cf3a34e4ce0"",
                    ""path"": ""<Touchscreen>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Camera"",
                    ""action"": ""DeltaMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""676f4f04-8f73-4e83-9167-c59cc44853f7"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomMouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52029c49-934c-4752-95ba-25d51e5e4460"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Camera"",
                    ""action"": ""StartDeltaDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5eff016e-af68-44e2-bb47-cf7fc04321a4"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Camera"",
                    ""action"": ""StartDeltaDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Camera"",
            ""bindingGroup"": ""Camera"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_DeltaMove = m_Movement.FindAction("DeltaMove", throwIfNotFound: true);
        m_Movement_ZoomMouse = m_Movement.FindAction("ZoomMouse", throwIfNotFound: true);
        m_Movement_StartDeltaDrag = m_Movement.FindAction("StartDeltaDrag", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_DeltaMove;
    private readonly InputAction m_Movement_ZoomMouse;
    private readonly InputAction m_Movement_StartDeltaDrag;
    public struct MovementActions
    {
        private @CameraControlScheme m_Wrapper;
        public MovementActions(@CameraControlScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @DeltaMove => m_Wrapper.m_Movement_DeltaMove;
        public InputAction @ZoomMouse => m_Wrapper.m_Movement_ZoomMouse;
        public InputAction @StartDeltaDrag => m_Wrapper.m_Movement_StartDeltaDrag;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @DeltaMove.started += instance.OnDeltaMove;
            @DeltaMove.performed += instance.OnDeltaMove;
            @DeltaMove.canceled += instance.OnDeltaMove;
            @ZoomMouse.started += instance.OnZoomMouse;
            @ZoomMouse.performed += instance.OnZoomMouse;
            @ZoomMouse.canceled += instance.OnZoomMouse;
            @StartDeltaDrag.started += instance.OnStartDeltaDrag;
            @StartDeltaDrag.performed += instance.OnStartDeltaDrag;
            @StartDeltaDrag.canceled += instance.OnStartDeltaDrag;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @DeltaMove.started -= instance.OnDeltaMove;
            @DeltaMove.performed -= instance.OnDeltaMove;
            @DeltaMove.canceled -= instance.OnDeltaMove;
            @ZoomMouse.started -= instance.OnZoomMouse;
            @ZoomMouse.performed -= instance.OnZoomMouse;
            @ZoomMouse.canceled -= instance.OnZoomMouse;
            @StartDeltaDrag.started -= instance.OnStartDeltaDrag;
            @StartDeltaDrag.performed -= instance.OnStartDeltaDrag;
            @StartDeltaDrag.canceled -= instance.OnStartDeltaDrag;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    private int m_CameraSchemeIndex = -1;
    public InputControlScheme CameraScheme
    {
        get
        {
            if (m_CameraSchemeIndex == -1) m_CameraSchemeIndex = asset.FindControlSchemeIndex("Camera");
            return asset.controlSchemes[m_CameraSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnDeltaMove(InputAction.CallbackContext context);
        void OnZoomMouse(InputAction.CallbackContext context);
        void OnStartDeltaDrag(InputAction.CallbackContext context);
    }
}
